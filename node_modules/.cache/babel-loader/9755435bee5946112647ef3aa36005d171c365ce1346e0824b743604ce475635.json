{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFrameHeight = void 0;\nconst react_1 = require(\"react\");\nconst use_state_with_ref_1 = require(\"./use-state-with-ref\");\n/**\n * The frame height is normally, just `auto` (i.e., it expands to fit the\n * items), but in adaptiveHeight mode, it's the height of the tallest visible\n * item.\n *\n * In adaptiveHeight mode, we also switch between two states to ensure that\n * slides don't render with zero height when server-side-rendering:\n *\n * - When initializedAdaptiveHeight is false: the frame has height auto; visible\n *   slides have height auto; invisible slides have height 0\n * - The client sets initializedAdaptiveHeight to true once we've measured all\n *   the visible slides' heights\n * - When initializedAdaptiveHeight is true: the frame has height set to the\n *   tallest visible slide; all slides have height 100%\n */\nconst useFrameHeight = (adaptiveHeight, slidesToShow, slideCount) => {\n  const [visibleHeights, setVisibleHeights, visibleHeightsRef] = (0, use_state_with_ref_1.useStateWithRef)([]);\n  // Whether we've received heights of all initial visible heights\n  const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] = (0, react_1.useState)(false);\n  const handleVisibleSlideHeightChange = (0, react_1.useCallback)((slideIndex, height) => {\n    // Use the ref's value since it's always the latest value\n    const latestVisibleHeights = visibleHeightsRef.current;\n    let newVisibleHeights;\n    if (height === null) {\n      newVisibleHeights = latestVisibleHeights.filter(slideHeight => slideHeight.slideIndex !== slideIndex);\n    } else {\n      newVisibleHeights = [...latestVisibleHeights, {\n        slideIndex,\n        height\n      }];\n    }\n    setVisibleHeights(newVisibleHeights);\n    if (newVisibleHeights.length >= Math.min(slideCount, Math.ceil(slidesToShow))) {\n      setInitializedAdaptiveHeight(true);\n    }\n  }, [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]);\n  const frameHeight = (0, react_1.useMemo)(() => {\n    if (adaptiveHeight) {\n      // We want server-side-rendering to render the carousel with non-zero\n      // height. to achieve this, we first set the height to `auto` until\n      // we've received the heights of the visible slides. Then, we switch to\n      // a mode where the frame controls the height.\n      if (!initializedAdaptiveHeight) {\n        return 'auto';\n      }\n      const maxHeight = Math.max(0, ...visibleHeights.map(height => height.height));\n      return `${maxHeight}px`;\n    } else {\n      return 'auto';\n    }\n  }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n  return {\n    handleVisibleSlideHeightChange,\n    frameHeight,\n    initializedAdaptiveHeight\n  };\n};\nexports.useFrameHeight = useFrameHeight;","map":{"version":3,"names":["react_1","require","use_state_with_ref_1","useFrameHeight","adaptiveHeight","slidesToShow","slideCount","visibleHeights","setVisibleHeights","visibleHeightsRef","useStateWithRef","initializedAdaptiveHeight","setInitializedAdaptiveHeight","useState","handleVisibleSlideHeightChange","useCallback","slideIndex","height","latestVisibleHeights","current","newVisibleHeights","filter","slideHeight","length","Math","min","ceil","frameHeight","useMemo","maxHeight","max","map","exports"],"sources":["../../src/hooks/use-frame-height.ts"],"sourcesContent":[null],"mappings":";;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,oBAAA,GAAAD,OAAA;AAEA;;;;;;;;;;;;;;;AAeO,MAAME,cAAc,GAAGA,CAC5BC,cAAuB,EACvBC,YAAoB,EACpBC,UAAkB,KAmBhB;EACF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,EAAEC,iBAAiB,CAAC,GAC1D,IAAAP,oBAAA,CAAAQ,eAAe,EAAgB,EAAE,CAAC;EAEpC;EACA,MAAM,CAACC,yBAAyB,EAAEC,4BAA4B,CAAC,GAC7D,IAAAZ,OAAA,CAAAa,QAAQ,EAAC,KAAK,CAAC;EAEjB,MAAMC,8BAA8B,GAAG,IAAAd,OAAA,CAAAe,WAAW,EAChD,CAACC,UAAkB,EAAEC,MAAqB,KAAI;IAC5C;IACA,MAAMC,oBAAoB,GAAGT,iBAAiB,CAACU,OAAO;IACtD,IAAIC,iBAAgC;IACpC,IAAIH,MAAM,KAAK,IAAI,EAAE;MACnBG,iBAAiB,GAAGF,oBAAoB,CAACG,MAAM,CAC5CC,WAAW,IAAKA,WAAW,CAACN,UAAU,KAAKA,UAAU,CACvD;KACF,MAAM;MACLI,iBAAiB,GAAG,CAAC,GAAGF,oBAAoB,EAAE;QAAEF,UAAU;QAAEC;MAAM,CAAE,CAAC;;IAEvET,iBAAiB,CAACY,iBAAiB,CAAC;IAEpC,IACEA,iBAAiB,CAACG,MAAM,IACxBC,IAAI,CAACC,GAAG,CAACnB,UAAU,EAAEkB,IAAI,CAACE,IAAI,CAACrB,YAAY,CAAC,CAAC,EAC7C;MACAO,4BAA4B,CAAC,IAAI,CAAC;;EAEtC,CAAC,EACD,CAACN,UAAU,EAAEE,iBAAiB,EAAEH,YAAY,EAAEI,iBAAiB,CAAC,CACjE;EAED,MAAMkB,WAAW,GAAG,IAAA3B,OAAA,CAAA4B,OAAO,EAAC,MAAK;IAC/B,IAAIxB,cAAc,EAAE;MAClB;MACA;MACA;MACA;MACA,IAAI,CAACO,yBAAyB,EAAE;QAC9B,OAAO,MAAM;;MAGf,MAAMkB,SAAS,GAAGL,IAAI,CAACM,GAAG,CACxB,CAAC,EACD,GAAGvB,cAAc,CAACwB,GAAG,CAAEd,MAAM,IAAKA,MAAM,CAACA,MAAM,CAAC,CACjD;MACD,OAAO,GAAGY,SAAS,IAAI;KACxB,MAAM;MACL,OAAO,MAAM;;EAEjB,CAAC,EAAE,CAACzB,cAAc,EAAEO,yBAAyB,EAAEJ,cAAc,CAAC,CAAC;EAE/D,OAAO;IACLO,8BAA8B;IAC9Ba,WAAW;IACXhB;GACD;AACH,CAAC;AA/EYqB,OAAA,CAAA7B,cAAc,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}